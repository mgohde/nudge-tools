/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package storyeditor;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author mgohde
 */
public class StoryFrame extends javax.swing.JFrame {
    StoryNode lastSelectedStoryNode;
    ArrayList<StoryNode> rawNodeList;
    int lastSelectedStoryNodeIndex;
    Story internalStory;
    /**
     * Creates new form NewJFrame
     */
    public StoryFrame() 
    {
        initComponents();
        rawNodeList=new ArrayList<>();
        internalStory=new Story();
        lastSelectedStoryNode=null;
        
        nodeNameList.addListSelectionListener(new ListSelectionListener()
        {

            @Override
            public void valueChanged(ListSelectionEvent lse) 
            {
                dispatchNodeNameEvent(lse);
            }
                    
        });
        
        codeBox.setTabSize(4);
    }
    
    private void dispatchNodeNameEvent(ListSelectionEvent lse)
    {
        int idx=lse.getLastIndex();
        StoryNode n;
        int realIdx;
        int i;
        ListSelectionModel m;
        
        m=this.nodeNameList.getSelectionModel();
        realIdx=m.getMinSelectionIndex();
        
        for(i=m.getMinSelectionIndex();i<m.getMaxSelectionIndex();i++)
        {
            if(m.isSelectedIndex(i))
            {
                realIdx=i;
            }
        }
        
        idx=realIdx;
        if(idx<this.internalStory.nodeList.size())
        {
            if(idx==-1)
            {
                idx=1;
            }
            
            n=this.internalStory.nodeList.get(idx);
            System.out.println("Selected story node "+n.name);
            codeBox.setText(n.toString());
            this.lastSelectedStoryNode=n;
            this.lastSelectedStoryNodeIndex=idx;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        nodeNameList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        drawingPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        codeBox = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JToggleButton();
        newItemButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        newItem = new javax.swing.JMenu();
        newButton = new javax.swing.JMenuItem();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setViewportView(nodeNameList);

        jScrollPane1.setViewportView(jScrollPane2);

        jLabel1.setText("Code:");

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        codeBox.setColumns(20);
        codeBox.setRows(5);
        jScrollPane4.setViewportView(codeBox);

        jLabel2.setText("Node");

        editButton.setText("Edit");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        newItemButton.setText("New");
        newItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newItemButtonActionPerformed(evt);
            }
        });

        newItem.setText("File");

        newButton.setText("New");
        newItem.add(newButton);

        openItem.setText("Open");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        newItem.add(openItem);

        saveItem.setText("Save");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        newItem.add(saveItem);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        newItem.add(jMenuItem1);

        jMenuBar1.add(newItem);

        editMenu.setText("Edit");
        jMenuBar1.add(editMenu);

        helpMenu.setText("Help");

        aboutItem.setText("About...");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(editButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(newItemButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(drawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(updateButton)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(newItemButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        new AboutFrame().setVisible(true);
    }//GEN-LAST:event_aboutItemActionPerformed

    /* This function will attempt to update everything onscreen whenever some
     * change is made to the storyline.
     */
    private void updateFields()
    {
        DefaultListModel m=new DefaultListModel();
        
        for(StoryNode n:this.internalStory.nodeList)
        {
            m.addElement(n.name);
        }
        
        this.nodeNameList.setModel(m);
        
        if(this.lastSelectedStoryNode!=null)
        {
            this.codeBox.setText(this.lastSelectedStoryNode.toString());
        }
        //TODO: Add something for selected nodes, etc.
    }
    
    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        JFileChooser jfc=new JFileChooser();
        
        int retV=jfc.showOpenDialog(this);
        
        if(retV==JFileChooser.APPROVE_OPTION)
        {
            System.out.println("File selected: "+jfc.getSelectedFile());
            Story newStory=new Story();
            try {
                newStory.loadStory(FileSystems.getDefault().getPath(jfc.getSelectedFile().toString()));
                this.internalStory=newStory;
                updateFields();
            } catch (IOException ex) {
                System.err.println("HOOOOooOOOoOoOooooooOooooOooooOOO! "+jfc.getSelectedFile());
            }
        }
        
        else
        {
            System.out.println("File open op discarded.");
        }
    }//GEN-LAST:event_openItemActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        JFileChooser jfc=new JFileChooser();
        
        int retV=jfc.showSaveDialog(this);
        
        if(retV==JFileChooser.APPROVE_OPTION)
        {
            System.out.println("File selected: "+jfc.getSelectedFile());
            try {
                this.internalStory.saveStory(jfc.getSelectedFile());
                updateFields();
            } catch (IOException ex) {
                System.err.println("HOOOOooOOOoOoOooooooOooooOooooOOO! "+jfc.getSelectedFile());
            }
        }
        
        else
        {
            System.out.println("File save op discarded.");
        }
    }//GEN-LAST:event_saveItemActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        //TODO: Add code for manual node modification and insertion.
        String textContent=codeBox.getText();
        StoryNode newNode;
        
        //Determine the currently selected field:
        if(this.lastSelectedStoryNode!=null)
        {
            String lineList[]=textContent.split("\n");
            System.out.println("Text content: "+textContent);
            ArrayList<String> lines=new ArrayList<>();
            
            lines.addAll(Arrays.asList(lineList));
            
            newNode=new StoryNode();
            newNode.parse(lines);
            this.internalStory.nodeList.set(this.lastSelectedStoryNodeIndex, newNode);
            this.lastSelectedStoryNode=newNode;
        }
        
        updateFields();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void newItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newItemButtonActionPerformed
        //Creates a new node depending on the contents of a dialog.
        String newNodeName;
        
        newNodeName=(String) JOptionPane.showInputDialog(this, "Enter new node name:");
        
        if(newNodeName!=null)
        {
            StoryNode n=new StoryNode();
            n.name=newNodeName;
            this.internalStory.nodeList.add(n);
            updateFields();
        }
    }//GEN-LAST:event_newItemButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        this.internalStory.nodeList.remove(this.lastSelectedStoryNode);
        this.lastSelectedStoryNode=null;
        if(this.lastSelectedStoryNodeIndex>0)
        {
            this.lastSelectedStoryNodeIndex--;
        }
        
        else
        {
            this.lastSelectedStoryNodeIndex=0;
        }
        
        updateFields();
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StoryFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JTextArea codeBox;
    private javax.swing.JToggleButton deleteButton;
    private javax.swing.JPanel drawingPanel;
    private javax.swing.JButton editButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem newButton;
    private javax.swing.JMenu newItem;
    private javax.swing.JButton newItemButton;
    private javax.swing.JList nodeNameList;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
