/*
 * TODO: modify this so that it can query the server, get a list of stories, and
 * display this list for the user to chooose which story they want.
 */
package storyeditor;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author mgohde
 */
public class ServerImportFrame extends javax.swing.JFrame 
{
    private Story newStory;
    Settings settings;
    /**
     * Creates new form ServerImportFrame
     */
    public ServerImportFrame(Settings s) {
        initComponents();
        settings=s;
        newStory=null;
        
        //Make the import button invisible until the user queries the database for stories.
        importButton.setVisible(false);
        storyNameLabel.setVisible(false);
        storyListBox.setVisible(false);
        
        //Set contents of text boxes to values from settings:
        serverNameBox.setText(settings.dbServer);
        databaseNameBox.setText(settings.dbName);
        userNameBox.setText(settings.dbUsername);
        passwordBox.setText(settings.dbPassword);
        
        this.setTitle("Import storyline from server...");
        this.setVisible(true);
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }
    
    public Story getImportedStory()
    {
        return newStory;
    }
    
    private Runnable callbackRunnable=null;
    
    public void registerImportCallback(Runnable r)
    {
        callbackRunnable=r;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        serverNameBox = new javax.swing.JTextField();
        databaseNameBox = new javax.swing.JTextField();
        userNameBox = new javax.swing.JTextField();
        passwordBox = new javax.swing.JPasswordField();
        queryButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        storyListBox = new javax.swing.JComboBox();
        storyNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Server Name:");

        jLabel2.setText("User Name:");

        jLabel3.setText("Password:");

        jLabel4.setText("Database Name:");

        serverNameBox.setText("dowell-nudge.colorado.edu");

        databaseNameBox.setText("nudge");

        userNameBox.setText("someuser");

        passwordBox.setText("somepassword");

        queryButton.setText("Query");
        queryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryButtonActionPerformed(evt);
            }
        });

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        storyListBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        storyListBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storyListBoxActionPerformed(evt);
            }
        });

        storyNameLabel.setText("Story Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(queryButton)
                    .addComponent(storyNameLabel))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(importButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordBox)
                            .addComponent(databaseNameBox)
                            .addComponent(userNameBox)
                            .addComponent(serverNameBox, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(storyListBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(serverNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(databaseNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(userNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(storyListBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(storyNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryButton)
                    .addComponent(importButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void queryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryButtonActionPerformed
        Connection c;
        Statement s;
        PreparedStatement p;
        ResultSet r;
        
        ArrayList<String> storyNameList=new ArrayList<>();
        
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            System.out.println("Attempting to query URL:");
            System.out.println("jdbc:mysql://"+this.serverNameBox.getText()+"/"+this.databaseNameBox.getText());
            //System.out.println(this.userNameBox.getText());
            //System.out.println(this.passwordBox.getText());
            c=DriverManager.getConnection("jdbc:mysql://"+this.serverNameBox.getText()+"/"+this.databaseNameBox.getText(), this.userNameBox.getText(), this.passwordBox.getText());
            s=c.createStatement();
            
            //Get all story names:
            r=s.executeQuery("SELECT DISTINCT storytitle FROM storytable");
            
            //The next() method moves us to the next record.
            while(r.next())
            {
                storyNameList.add(r.getString(1));
            }
            
            r.close();
            s.close();
            c.close();
            
            String storyNames[]=new String[storyNameList.size()];
            storyNames=storyNameList.toArray(storyNames);
            
            storyListBox.setModel(new DefaultComboBoxModel(storyNames));
            storyListBox.setVisible(true);
            storyNameLabel.setVisible(true);
            importButton.setVisible(true);
        } catch(ClassNotFoundException e)
        {
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: Could not connect to specified MySQL server instance!", "Could not connect", JOptionPane.ERROR_MESSAGE);
            System.err.println("Got SQLException. Contents: ");
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_queryButtonActionPerformed

    private void storyListBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storyListBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_storyListBoxActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        String storyName=(String) this.storyListBox.getSelectedItem();
        Story story=new Story();
        ArrayList<DBNode> nodes=new ArrayList<>();
        ArrayList<DBAnswer> answerNodes=new ArrayList<>();
        
        System.out.println("Fetching: "+storyName);
        
        //Moderately shamelessly copy-pasted from the story name query function above.
        Connection c;
        Statement s;
        ResultSet r;
        
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            System.out.println("Attempting to query URL:");
            System.out.println("jdbc:mysql://"+this.serverNameBox.getText()+"/"+this.databaseNameBox.getText());
            c=DriverManager.getConnection("jdbc:mysql://"+this.serverNameBox.getText()+"/"+this.databaseNameBox.getText(), this.userNameBox.getText(), this.passwordBox.getText());
            s=c.createStatement();
            
            //Get all story names:
            r=s.executeQuery("SELECT storylinetite,storyline FROM storytable WHERE storytitle='"+storyName+"'");
            
            //The next() method moves us to the next record.
            while(r.next())
            {
                //The query should be two strings wide.
                DBNode n=new DBNode();
                n.name=r.getString(1);
                n.text=r.getString(2);
                nodes.add(n);
            }
            
            //Now fill out the answers list:
            r.close();
            r=s.executeQuery("SELECT storylinetite,answer,answerchoice FROM answers WHERE storytitle='"+storyName+"'");
            
            while(r.next())
            {
                DBAnswer a=new DBAnswer();
                a.ownerName=r.getString(1);
                a.answer=r.getString(2);
                a.text=r.getString(3);
                answerNodes.add(a);
            }
            
            //Now fill out the rest of the answers with the results table:
            for(DBAnswer a:answerNodes)
            {
                r.close();
                
                r=s.executeQuery("SELECT startprob,stopprob,gotostorylinetite FROM results WHERE storytitle='"+storyName+"' AND storylinetite='"+a.ownerName+"' AND answer='"+a.answer+"'");
                System.out.println("Running query: "+"SELECT startprob,stopprob,gotostorylinetite FROM results WHERE storytitle='"+storyName+"' AND storylinetite='"+a.ownerName+"' AND answer='"+a.answer+"'");
                
                while(r.next())
                {
                    int start=r.getInt(1);
                    int stop=r.getInt(2);
                    String destName=r.getString(3);
                    
                    a.calcProb(start, stop);
                    a.destNodeNames.add(destName);
                }
            }
            
            if(!r.isClosed())
            {
                r.close();
            }
            
            s.close();
            c.close();
            
            //Attempt to map answers back to their DBNodes.
            for(DBNode d:nodes)
            {
                for(DBAnswer a:answerNodes)
                {
                    if(d.name.equals(a.ownerName))
                    {
                        d.answers.add(a);
                    }
                }
            }
            
            //Attempt to generate a story from the mapped DBNodes:
            for(DBNode n:nodes)
            {
                StoryNode sn=new StoryNode();
                sn.name=n.name;
                sn.text=n.text;
                
                for(DBAnswer a:n.answers)
                {
                    Response resp;
                    boolean createdResponse=false;
                    
                    //Determine if the current response is present:
                    if((resp=sn.getResponse(a.text))==null)
                    {
                        resp=new Response();
                        createdResponse=true;
                    }
                    
                    resp.prompt=a.text;
                    resp.destNames.addAll(a.destNodeNames);
                    resp.destWeights.addAll(a.probList);
                    
                    if(createdResponse)
                    {
                        sn.respList.add(resp);
                    }
                }
                
                story.nodeList.add(sn);
            }
            
            System.out.println("Managed to import story. Story contents:");
            System.out.println(story.toString());
            
            story.title=storyName;
            this.newStory=story;
            
            if(callbackRunnable!=null)
            {
                callbackRunnable.run();
            }
            
            //Close the window.
            this.dispose();
        } catch(ClassNotFoundException e)
        {
            e.printStackTrace();;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: Could not connect to specified MySQL server instance!", "Could not connect", JOptionPane.ERROR_MESSAGE);
            System.err.println("Got SQLException. Contents: ");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_importButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField databaseNameBox;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField passwordBox;
    private javax.swing.JButton queryButton;
    private javax.swing.JTextField serverNameBox;
    private javax.swing.JComboBox storyListBox;
    private javax.swing.JLabel storyNameLabel;
    private javax.swing.JTextField userNameBox;
    // End of variables declaration//GEN-END:variables
}
